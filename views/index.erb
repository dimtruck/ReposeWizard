<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" href="http://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css">
    <link href="bootstrap/css/bootstrap.min.css" rel="stylesheet" />
    <link href="bootstrap/css/wizard.css" rel="stylesheet" />
    <link href="http://cdnjs.cloudflare.com/ajax/libs/chosen/0.9.15/chosen.css" rel="stylesheet" />
    <style type="text/css">
      .wizard-modal p {
        margin: 0 0 10px;
        padding: 0;
      }
      
      .repose-wizard-entry label {
        display: inline;
        min-width: 250px;
        font-weight: 900;
        float: left;
      }
      
      .repose-wizard-entry{
        clear: both;
      }
    </style>
  </head>
  <body style="padding:30px;">
    <button id="new-config-wizard" class="btn btn-primary">Create new Repose configuration</button>
    <button id="test-config-wizard" class="btn btn-primary">Test existing configuration in Repose</button>
    <div class="wizard" id="repose-wizard">
      <h1>Repose Wizard</h1>
          <div class="wizard-card" data-onValidated="setVersion" data-cardname="version">
            <h3>Select version</h3>
            <div class="wizard-input-section">
              <div class="control-group">
                <select name="version" id="version" data-bind="options: versions, value: selected_version"></select>
              </div>
            </div>
          </div>
          <div class="wizard-card" data-cardname="basic">
            <h3>Basic setup</h3>
            <div class="wizard-input-section">
              <div class="control-group" data-bind="with: basicData">
                <div data-bind="template: { name: basicTemplate, data: data} "></div>
              </div>
            </div>
          </div>
          <div class="wizard-card" data-cardname="filters">
            <h3>Filters</h3>
            <div class="alert">
                What do you want Repose to do?  You can either build your configs from scratch or use our cookbooks.
            </div>
            <div class="wizard-input-section">
              <div id="filter-accordion">
                <!-- ko foreach: filters -->
                <h3>
                  <a href="#">
                    <input type="checkbox" data-bind="checked: isSelected" />
                    <span data-bind="text: english"/>
                  </a>
                </h3>
                <div>
                  <p data-bind="text: filter_list"/>
                  <p data-bind="text: description"/>
                </div>
                <!-- /ko -->
              </div>
			</div>
		  </div>
          <div class="wizard-card" data-cardname="details">
            <h3>Detailed Info!</h3>
			<div class="alert">
				You need to provide a few more information to make Repose rock!
			</div>
			<div class="wizard-input-section">
                <div id="detail-accordion">
                  <!-- ko foreach: details -->
                  <h3 data-bind="text: filter"></h3>
                  <div>
                    <div data-bind="template: { name: configTemplate, data: configData} "></div>
                  </div>
                  <!-- /ko -->
                </div>
			</div>
          </div>
          <div class="wizard-card" data-cardname="test">
            <h3>Test Drive!</h3>
			<div class="alert">
				Your configuration has been deployed to the following url: <url here>.  You can now test drive it and get benchmarks for your requests.
			</div>
            <div class="wizard-input-section">
              <div class="control-group">
                <fieldset>
                    <legend>Request setup</legend>
                    <div class="repose-wizard-entry">
                        <label for="method">Select your method</label>
                        <select name="method" data-bind="options: methods, value: selected_method"></select>
                    </div>
                    <div class="repose-wizard-entry">
                        <label for="headers">Headers:</label>
                        <button type="button" data-bind="click: addHeader">Add header</button>
                        <ul data-bind="foreach: headers, visible: headers().length > 0">
                            <li>
                                <input data-bind="value: data" />
                                <a href="#" data-bind="click: $parent.removeHeader">Delete</a>
                            </li>
                        </ul>
                    </div>
                    <div class="repose-wizard-entry">
                        <label for="request_uri">Request URI</label>
                        <input data-bind="value: request_uri"/>
                    </div>
                    <div class="repose-wizard-entry" data-bind="visible: isMethodForData">
                        <label for="request_data">Request Data</label>
                        <textarea data-bind="value: request_data"></textarea>
                    </div>
                    <button type="button" data-bind="click: sendRequest">Send One Request</button>
                    <div data-bind="template: { name: 'responseTemplate', data: responseData} "></div>
                    <div>
                        <h3>Benchmark data (optional for benchmarking)</h3>
                        <div class="repose-wizard-entry">
                            <label for="number_of_requests">Number of requests:</label>
                            <input data-bind="value: number_of_requests"/><br/>
                        </div>
                        <div class="repose-wizard-entry">
                            <label for="number_of_concurrent">Number of concurrent requests:</label>
                            <input data-bind="value: number_of_concurrent"/>
                        </div>
                        <div class="repose-wizard-entry">
                            <label for="time_limit">Time Limit:</label>
                            <input data-bind="value: time_limit"/>
                        </div>
                        <div class="repose-wizard-entry">
                            <label for="window_size">TCP window size:</label>
                            <input data-bind="value: window_size"/>
                        </div>
                        <button type="button" data-bind="click: benchmark">Benchmark</button>
                        <div data-bind="template: { name: 'benchmarkTemplate', data: benchmarkData} "></div>
                    </div>
                </fieldset>
                Simple client with options for methods, headers, and request.  Output will be request info, response info, and any other requests being made internally by Repose as well as response time.  One other options is to run a "benchmark test," which spins up apache benchmark and allows user to specify # of requests (max: 1000), concurrency (max: 100), time limit and window size.  Runs first against service directly and then via Repose.
              </div>
            </div>
          </div>
          <div class="wizard-card" data-cardname="download">
            <h3>Download!</h3>
			<div class="alert">
				Congratulations!  You're done.
			</div>
            <div class="wizard-input-section">
              <div class="control-group">
                  Download your configuration <a href="#">here</a>.  If you'd like more information on setting up Repose in your system, please refer to <a href="#">here</a>.
              </div>
            </div>
          </div>
		
		
			<div class="wizard-error">
				<div class="alert alert-error">
					<strong>There was a problem</strong> with your submission.
					Please correct the errors and re-submit.
				</div>
			</div>
		
			<div class="wizard-failure">
				<div class="alert alert-error">
					<strong>There was a problem</strong> submitting the form.
					Please try again in a minute.
				</div>
			</div>
		
			<div class="wizard-success">
				<div class="alert alert-success">
					Successful submission
				</div>
		
				<a class="btn create-another-config">Create another config</a>
				<span style="padding:0 10px">or</span>
				<a class="btn im-done">Done</a>
			</div>
		
		</div>
        
        <script type="text/html" id="basicTemplate">
            <fieldset data-bind="with: container">
                <legend>Container</legend>
                <div class="repose-wizard-entry">
                    <label for="container-via">via header:</label>
                    <input data-bind="value: via"/>
                </div>
                <div class="repose-wizard-entry">
                    <label for="container-content-body-read-limit">Content body read limit:</label>
                    <input data-bind="value: content_body_read_limit"/>
                </div>
                <div class="repose-wizard-entry">
                    <label for="container-connection-timeout">Connection timeout to origin (ms):</label>
                    <input data-bind="value: connection_timeout"/>
                </div>
                <div class="repose-wizard-entry">
                    <label for="container-read-timeout">Read timeout from origin (ms):</label>
                    <input data-bind="value: read_timeout"/>
                </div>
                <div class="repose-wizard-entry">
                    <label for="container-proxy-thread-pool">Thread pool:</label>
                    <input data-bind="value: proxy_thread_pool"/>
                </div>
                <div class="repose-wizard-entry">
                    <label for="container-client-request-logging">Log traffic between repose & origin:</label>
                    <input data-bind="value: client_request_logging"/>
                </div>
                <div class="repose-wizard-entry">
                    <label for="container-jmx-reset-time">How long JMX keeps data (s):</label>
                    <input data-bind="value: jmx_reset_time"/>
                </div>
                <div class="repose-wizard-entry">
                    <label for="container-logging-directory-href">Logging Directory href:</label>
                    <input data-bind="value: logging_directory.href"/>
                </div>
                <fieldset data-bind="with: deployment_directory">
                    <legend>Deployment directory</legend>
                    <div class="repose-wizard-entry">
                        <label for="container-deployment-directory-value">deployment directory:</label>
                        <input data-bind="value: value"/>
                    </div>
                    <div class="repose-wizard-entry">
                        <label for="container-deployment-directory-auto-clean">Auto clean:</label>
                        <input type="checkbox" data-bind="checked: auto_clean"/>
                    </div>
                </fieldset>
                <fieldset data-bind="with: artifact_directory">
                    <legend>Artifact directory</legend>
                    <div class="repose-wizard-entry">
                        <label for="container-artifact-directory-value">artifact directory:</label>
                        <input data-bind="value: value"/>
                    </div>
                    <div class="repose-wizard-entry">
                        <label for="container-artifact-directory-check-interval">Check interval:</label>
                        <input data-bind="value: check_interval"/>
                    </div>
                </fieldset>
                <fieldset data-bind="with: ssl_directory">
                    <legend>SSL directory</legend>
                    <div class="repose-wizard-entry">
                        <label for="container-artifact-directory-keystore-filename">Name of the app keystore file:</label>
                        <input data-bind="value: keystore_filename"/>
                    </div>
                    <div class="repose-wizard-entry">
                        <label for="container-artifact-directory-keystore-password">Password for entire app keystore:</label>
                        <input data-bind="value: keystore_password"/>
                    </div>
                    <div class="repose-wizard-entry">
                        <label for="container-ssl-directory-key-password">Password for an app key in the keystore:</label>
                        <input data-bind="value: key_password"/>
                    </div>
                </fieldset>
            </fieldset>
            
            <fieldset data-bind="with: system_model">
                <legend>System model</legend>
                <button type="button" data-bind="click: $parents[1].addReposeCluster" id="add-repose-cluster">Add Repose Cluster</button>
                <div data-bind="foreach: repose_clusters">
                    <div class="repose-wizard-entry">
                        <label for="system-model-repose-cluster-id">Cluster id:</label>
                        <input data-bind="value: id"/>
                    </div>
                    <button type="button" data-bind="click: addReposeClusterNode">Add Node</button>
                    <div data-bind="foreach: nodes">
                        <div class="repose-wizard-entry">
                            <label for="system-model-repose-cluster-node-id">node id:</label>
                            <input data-bind="value: id"/>
                        </div>
                        <div class="repose-wizard-entry">
                            <label for="system-model-repose-cluster-node-hostname">node hostname:</label>
                            <input data-bind="value: hostname"/>
                        </div>
                        <div class="repose-wizard-entry">
                            <label for="system-model-repose-cluster-node-http-port">node http port:</label>
                            <input data-bind="value: http_port"/>
                        </div>
                        <div class="repose-wizard-entry">
                            <label for="system-model-repose-cluster-node-https-port">node https port:</label>
                            <input data-bind="value: https_port"/>
                        </div>
                    </div>
                    <button type="button" data-bind="click: addReposeClusterFilter">Add Filter</button>
                    <div data-bind="foreach: filters">
                        <div class="repose-wizard-entry">
                            <label for="system-model-repose-cluster-filter-id">filter id:</label>
                            <input data-bind="value: id"/>
                        </div>
                        <div class="repose-wizard-entry">
                            <label for="system-model-repose-cluster-filter-name">filter name:</label>
                            <input data-bind="value: name"/>
                        </div>
                        <div class="repose-wizard-entry">
                            <label for="system-model-repose-cluster-filter-configuration">node configuration:</label>
                            <input data-bind="value: configuration"/>
                        </div>
                        <div class="repose-wizard-entry">
                            <label for="system-model-repose-cluster-filter-https-port">node uri:</label>
                            <input data-bind="value: uri"/>
                        </div>
                    </div>
                    <button type="button" data-bind="click: addReposeClusterService">Add Service</button>
                    <div data-bind="foreach: services">
                        <div class="repose-wizard-entry">
                            <label for="system-model-repose-cluster-service-name">service name:</label>
                            <input data-bind="value: name"/>
                        </div>
                    </div>
                    <button type="button" data-bind="click: addReposeClusterDestination">Add Destination</button>
                    <div data-bind="foreach: destinations">
                        <button type="button" data-bind="click: addReposeClusterDestinationEndpoint">Add Destination Endpoint</button>
                        <div data-bind="foreach: endpoints">
                            <div class="repose-wizard-entry">
                                <label for="system-model-repose-cluster-destination-endpoint-id">Destination endpoint id:</label>
                                <input data-bind="value: id"/>
                            </div>
                            <div class="repose-wizard-entry">
                                <label for="system-model-repose-cluster-destination-endpoint-protocol">Destination endpoint protocol:</label>
                                <input data-bind="value: protocol"/>
                            </div>
                            <div class="repose-wizard-entry">
                                <label for="system-model-repose-cluster-destination-endpoint-route-path">Destination endpoint route path:</label>
                                <input data-bind="value: route_path"/>
                            </div>
                            <div class="repose-wizard-entry">
                                <label for="system-model-repose-cluster-destination-endpoint-default">Default:</label>
                                <input type="checkbox" data-bind="checked: is_default"/>
                            </div>
                            <div class="repose-wizard-entry">
                                <label for="system-model-repose-cluster-destination-endpoint-hostname">Destination endpoint hostname:</label>
                                <input data-bind="value: hostname"/>
                            </div>
                            <div class="repose-wizard-entry">
                                <label for="system-model-repose-cluster-destination-endpoint-port">Destination endpoint port:</label>
                                <input data-bind="value: port"/>
                            </div>
                        </div>
                        <button type="button" data-bind="click: addReposeClusterDestinationCluster">Add Destination Cluster</button>
                        <div data-bind="foreach: clusters">
                            <div class="repose-wizard-entry">
                                <label for="system-model-repose-cluster-destination-cluster-id">Destination cluster id:</label>
                                <input data-bind="value: id"/>
                            </div>
                            <div class="repose-wizard-entry">
                                <label for="system-model-repose-cluster-destination-cluster-protocol">Destination cluster protocol:</label>
                                <input data-bind="value: protocol"/>
                            </div>
                            <div class="repose-wizard-entry">
                                <label for="system-model-repose-cluster-destination-cluster-route-path">Destination cluster route path:</label>
                                <input data-bind="value: route_path"/>
                            </div>
                            <div class="repose-wizard-entry">
                                <label for="system-model-repose-cluster-destination-cluster-default">Default:</label>
                                <input type="checkbox" data-bind="checked: is_default"/>
                            </div>
                            <div class="repose-wizard-entry">
                                <label for="system-model-repose-cluster-destination-cluster">Destination cluster:</label>
                                <input data-bind="value: hostname"/>
                            </div>
                        </div>
                    </div>
                    <div class="repose-wizard-entry">
                        <label for="system-model-repose-cluster-rewrite-host-header">Rewrite host header:</label>
                        <input type="checkbox" data-bind="checked: rewrite_host_header"/>
                    </div>
                </div>
                <button type="button" data-bind="click: $parents[1].addServiceCluster" id="add-service-cluster">Add Service Cluster</button>
                <div data-bind="foreach: service_clusters">
                    <div class="repose-wizard-entry">
                        <label for="system-model-service-cluster-id">Cluster id:</label>
                        <input data-bind="value: id"/>
                    </div>
                    <button type="button" data-bind="click: addServiceClusterNode">Add Node</button>
                    <div data-bind="foreach: nodes">
                        <div class="repose-wizard-entry">
                            <label for="system-model-service-cluster-node-id">node id:</label>
                            <input data-bind="value: id"/>
                        </div>
                        <div class="repose-wizard-entry">
                            <label for="system-model-service-cluster-node-hostname">node hostname:</label>
                            <input data-bind="value: hostname"/>
                        </div>
                        <div class="repose-wizard-entry">
                            <label for="system-model-service-cluster-node-http-port">node http port:</label>
                            <input data-bind="value: http_port"/>
                        </div>
                        <div class="repose-wizard-entry">
                            <label for="system-model-service-cluster-node-https-port">node https port:</label>
                            <input data-bind="value: https_port"/>
                        </div>
                    </div>
                </div>
            </fieldset>
            <fieldset data-bind="with: logger">
                <legend>Logging</legend>
                <div class="repose-wizard-entry">
                    <label for="logger-level">Level:</label>
                    <input data-bind="value: level"/>
                </div>
                <div class="repose-wizard-entry">
                    <label for="logger-jetty">Jetty logging:</label>
                    <input data-bind="value: jetty_level"/>
                </div>
                <div class="repose-wizard-entry">
                    <label for="logger-file">File:</label>
                    <input data-bind="value: file"/>
                </div>
                <div class="repose-wizard-entry">
                    <label for="logger-file-max">Max file size:</label>
                    <input data-bind="value: file_max"/>
                </div>
                <div class="repose-wizard-entry">
                    <label for="logger-file-max-backup">Number of files to backup:</label>
                    <input data-bind="value: file_max_backup"/>
                </div>
                <div class="repose-wizard-entry">
                    <label for="logger-pattern">Pattern:</label>
                    <input data-bind="value: pattern"/>
                </div>
            </fieldset>
        </script>
        
        <script type="text/html" id="benchmarkTemplate">
            <div id="benchmarkTabs" data-bind="with: benchmarkData">
                <ul>
                    <li><a href="#direct-tab">Directly to Origin</a></li>
                    <li><a href="#via-repose-tab">Through Repose</a></li>
                    <li><a href="#comparison-tab">Comparison</a></li>
                </ul>
                <div id="direct-tab">
                    <p>
                            benchmark output with calls directly to origin service
                    </p>
                </div>
                <div id="via-repose-tab">
                    <p>
                            benchmark output with calls via repose to origin service
                    </p>
                </div>
                <div id="comparison-tab">
                    <p>
                            comparison between repose and origin service with notes                                                      
                    </p>
                </div>
            </div>        
        </script>
        
        <script type="text/html" id="responseTemplate">
            <div id="responseTabs" data-bind="with: responseData">
                <ul>
                    <li><a href="#request-tab">Request</a></li>
                    <li><a href="#repose-tab">Repose</a></li>
                    <li><a href="#response-tab">Response</a></li>
                </ul>
                <div id="request-tab">
                    <p class="entry-wrapper" >
                        <div class="repose-wizard-entry">
                            <label for="request_uri">Request URI</label><span data-bind="text: request_from_client.request_uri"/>
                        </div>
                        <div class="repose-wizard-entry">
                            <label for="request_method">Request Method</label><span data-bind="text: request_from_client.request_method"/>
                        </div>
                        <div class="repose-wizard-entry">
                            <label for="request_headers">Request Headers</label>
                            <ul data-bind="foreach: request_from_client.request_headers">
                                <li data-bind="text: data"/>
                            </ul>
                        </div>
                        <div class="repose-wizard-entry">
                            <label for="request_data">Request Data</label><span data-bind="text: request_from_client.request_data"/>
                        </div>
                    </p>
                </div>
                <div id="repose-tab">
                    <!-- ko foreach: repose_flow -->
                    <div>
                        <!-- ko if: type==='request' -->
                        <fieldset>
                            <legend data-bind="text: id"/></legend>
                            <div class="repose-wizard-entry">
                                <label for="request_uri">Request URI</label><span data-bind="text: request_uri"/>
                            </div>
                            <div class="repose-wizard-entry">
                                <label for="request_method">Request Method</label><span data-bind="text: request_method"/>
                            </div>
                            <div class="repose-wizard-entry">
                                <label for="request_headers">Request Headers</label>
                                <ul data-bind="foreach: request_headers">
                                    <li data-bind="text: data"/>
                                </ul>
                            </div>
                            <div class="repose-wizard-entry">
                                <label for="request_data">Request Data</label><span data-bind="text: request_data"/>
                            </div>
                        </fieldset>
                        <!-- /ko -->
                        <!-- ko if: type==='response' -->
                        <fieldset>
                            <legend data-bind="text: id"/></legend>
                            <div class="repose-wizard-entry">
                                <label for="response_time">Response Time</label><span data-bind="text: response_time"/>
                            </div>
                            <div class="repose-wizard-entry">
                                <label for="response_headers">Response Headers</label>
                                <ul data-bind="foreach: response_headers">
                                    <li data-bind="text: data"/>
                                </ul>
                            </div>
                            <div class="repose-wizard-entry">
                                <label for="response_data">Response Data</label><span data-bind="text: response_data"/>
                            </div>
                        </fieldset>
                        <!-- /ko -->
                    </div>
                    <!-- /ko -->
                </div>
                <div id="response-tab">
                    <p>
                        <div class="repose-wizard-entry">
                            <label for="response_time">Response Time</label><span data-bind="text: response_to_client.response_time"/>
                        </div>
                        <div class="repose-wizard-entry">
                            <label for="response_headers">Response Headers</label>
                            <ul data-bind="foreach: response_to_client.response_headers">
                                <li data-bind="text: data"/>
                            </ul>
                        </div>
                        <div class="repose-wizard-entry">
                            <label for="response_data">Response Data</label><span data-bind="text: response_to_client.response_data"/>
                        </div>
                    </p>
                </div>
            </div>
        </script>
							
		<script type="text/html" id="clientAuthTemplate">
            <div>
                <label for="auth-filter-module">Select Auth filter Module</label>
                <select name="auth-filter-module" id="auth-filter-module" data-bind="options: auth_filter_modules, value: auth_filter_module, optionsText: 'value', optionsCaption: 'Choose...'"></select>
                <div data-bind="template: { name: authFilterModuleTemplate, data: authModuleData} ">
                </div>
            </div>
            <div>
                <label for="auth-filter-module">White lists</label>
                <button type="button" data-bind="click: addWhiteListUri" id="add-white-list">Add white list regex</button>
                <ul data-bind="foreach: white_list_uris, visible: white_list_uris().length > 0">
                    <li>
                        <input data-bind="value: uri" />
                        <a href="#" data-bind="click: $parent.removeWhiteListUri">Delete</a>
                    </li>
                </ul>
            </div>
        </script>
		<script type="text/html" id="rateLimitingTemplate">
            <span data-bind="text: id"/>
        </script>
        <script type="text/html" id="basicAuthTemplate">
            <div>
                <label for="username">Username:<span class="caret"></span></label>
                <input data-bind="value: username"/>
            </div>
            <div>
                <label for="password">Password:<span class="caret"></span></label>
                <input type="password" data-bind="value: password"/>
            </div>
        </script>
        <script type="text/html" id="openstackAuthTemplate">
            <fieldset>
                <legend>Main information</legend>
                <div>
                    <label for="delegable">Delegable</label>
                    <input type="checkbox" data-bind="checked: delegable"/>
                </div>
                <div>
                    <label for="user_cache_timeout">user cache timeout</label>
                    <input data-bind="value: user_cache_timeout"/>
                </div>
                <div>
                    <label for="token_cache_timeout">token cache timeout</label>
                    <input data-bind="value: token_cache_timeout"/>
                </div>
                <div>
                    <label for="tenanted">Tenanted</label>
                    <input type="checkbox" data-bind="checked: tenanted"/>
                </div>
                <div>
                    <label for="request_groups">Request Groups</label>
                    <input type="checkbox" data-bind="checked: request_groups"/>
                </div>
            </fieldset>
            <fieldset>
                <legend>OpenStack Identity Service endpoint<span class="caret"></span></legend>
                <div>
                    <label for="username">Username:<span class="caret"></span></label>
                    <input data-bind="value: service.username"/>
                </div>
                <div>
                    <label for="password">Password:<span class="caret"></span></label>
                    <input type="password" data-bind="value: service.password"/>
                </div>
                <div>
                    <label for="uri">Uri:<span class="caret"></span></label>
                    <input data-bind="value: service.uri"/>
                </div>
                <div>
                    <label for="tenantId">Tenant Id:</label>
                    <input data-bind="value: service.tenant_id"/>
                </div>
            </fieldset>
            <fieldset>
                <legend>Include endpoints in headers</legend>
                <div>
                    <input type="checkbox" data-bind="checked: header.isSelected" />
                    <span>Check to include endpoints in headers</span>
                </div>
                <div>
                    <label for="format">Endpoint header format:</label>
                    <select name="format" data-bind="options: header.format_enumerations, value: header.format"></select>
                </div>
                <div>
                    <label for="cache-timeout">Cache timeout in ms:</label>
                    <input data-bind="value: header.cache_timeout"/>
                </div>
            </fieldset>
            <button type="button" data-bind="click: $parent.addClientMapping" data='client_mappings'>Add target URI for auth requests</button>
            <ul data-bind="foreach: $parent.client_mappings">
                <li>
                    <input data-bind="value: tenant_id" placeholder="The tenantId with admin permission used by the Keystone implementation perform admin tasks." />
                    <input data-bind="value: regex" placeholder="Regex used to extract the client id from a given URI." />
                    <a href="#" data-bind="click: $parents[1].removeClientMapping">Delete</a>
                </li>
            </ul>
        </script>
        <script src="http://code.jquery.com/jquery-1.9.1.js"></script>
        <script src="http://code.jquery.com/ui/1.10.3/jquery-ui.js"></script>
  		<script src="http://cdnjs.cloudflare.com/ajax/libs/chosen/0.9.15/chosen.jquery.min.js"></script>
		<script src="bootstrap/js/bootstrap.min.js"></script>
        <script src="http://cdnjs.cloudflare.com/ajax/libs/knockout/2.2.1/knockout-min.js"></script>
		<script src="bootstrap/js/wizard.min.js"></script>
        <script type="text/javascript">
          $(function() {
            function WizardModel(){
                var self = this;
                self.basicData = ko.observable();
                self.versions = ko.observableArray([]);
                self.filters = ko.observableArray([]);
                self.details = ko.observableArray([]);
                self.selected_version = ko.observable();
                self.number_of_nodes = ko.observable();
                self.test_environment = ko.observable();
                self.responseData = ko.observable(new Response(''));
                self.benchmarkData = ko.observable(new Benchmark(''));

                self.methods = ko.observableArray(['GET','PUT','POST','DELETE','HEAD']);
                self.selected_method = ko.observable();
                self.headers = ko.observableArray([]);
                self.request_uri = ko.observable();
                self.request_data = ko.observable();
                self.isMethodForData = ko.observable(false);
                self.number_of_requests = ko.observable(1000);
                self.number_of_concurrent = ko.observable(100);
                self.time_limit = ko.observable(60);
                self.window_size = ko.observable(256);
                
                self.selected_method.subscribe(function(item){
                    if(item === 'PUT' || item === 'POST'){
                        self.isMethodForData(true);
                    }else{
                        self.isMethodForData(false);
                    }
                });
                
                self.addHeader = function (){
                    self.headers.push(new Header(''));
                };
                
                self.removeHeader = function(header){
                    self.headers.destroy(header);
                };

                
                self.sendRequest = function(){
                    if(self.selected_method() !== '' && self.request_uri() !== ''){
                        //if post or put, add data
                        var headersToSubmit = $.map(self.headers(), function(item){
                                return item.data()
                            }
                        );
                        var request_setup = {
                            'method': self.selected_method(),
                            'headers': ko.toJSON(self.headers()),
                            'uri': self.request_uri(),
                            'data': self.request_data()
                        };
                        $.ajax({
                            url: "/execute_request/" + self.test_environment(),
                            type: 'POST',
                            contentType: 'json',
                            data: ko.toJSON(request_setup),
                            success: function(data) {
                                //load data into responseData
                                console.log(data);
                                self.responseData(new Response(data));
                                self.responseTemplate = 'responseTemplate';
                                $('#responseTabs').tabs();
                            }
                        });
                        
                    }
                    //send request here
                };
                
                self.benchmark = function(){
                    //send benchmark here
                    $('#benchmarkTabs').tabs();
                };


                //$.fn.wizard.logging = true;
                var wizard = $("#repose-wizard").wizard({width:1000, increaseHeight: 100});
                $(".chzn-select").chosen();
                wizard.el.find(".wizard-ns-select").change(function() {
                    wizard.el.find(".wizard-ns-detail").show();
                });

                wizard.el.find(".create-server-service-list").change(function() {
                    var noOption = $(this).find("option:selected").length == 0;
                    wizard.getCard(this).toggleAlert(null, noOption);
                });
                
                wizard.cards["version"].on("loaded", function(card){
                    //load the version here
                    $.getJSON("/get_versions",function(versions){
                      self.versions(versions);
                    });
                });
                
                wizard.cards["basic"].on("loaded", function(card){
                    $.getJSON("/get_basic_info/" + self.selected_version(),function(basic){
                      self.basicData(new BasicData(basic));

                    });                    
                });

                wizard.cards["filters"].on("reload", function(card){
                    //load the version here
                    $.getJSON("/get_filters/" + self.selected_version(),function(filters){
                      var mappedFilters = $.map(filters,function(item){ return new Filter(item)});
                      self.filters(mappedFilters);
                      $("#filter-accordion").accordion({collapsible:true});
                      $('#filter-accordion input[type="checkbox"]').click(function(e) {
                        e.stopPropagation();
                      });
                    });
                });
                
                wizard.cards["details"].on("selected", function(card){
                    //load the version here
                    var filterstoSubmit = $.map(
                        ko.utils.arrayFilter(self.filters(), function(filter) { return filter.isSelected() }), function(item){
                            return item.id()
                        }
                    );
                    $.getJSON("/get_data_for_filter/" + filterstoSubmit.join(","),function(details){
                      var mappedDetails = $.map(details,function(item){ return new Detail(item)});
                      self.details(mappedDetails);
                      $("#detail-accordion").accordion({collapsible:true});
                      $('#detail-accordion').accordion('refresh');
                    });
                });
                
                wizard.cards["test"].on("selected", function(card){
                    $.getJSON("/get_test_environment",function(uri){
                      self.test_environment(uri.id);
                    });
                });


                wizard.on("submit", function(wizard) {
                    var submit = {};
                    console.log(wizard.serialize());

                    setTimeout(function() {
                        wizard.trigger("success");
                        wizard.hideButtons();
                        wizard._submitting = false;
                        wizard.showSubmitCard("success");
                        wizard._updateProgressBar(0);
                    }, 2000);
                });
	

                wizard.el.find(".wizard-success .im-done").click(function() {
                    wizard.reset().close();
                });

                wizard.el.find(".wizard-success .create-another-config").click(function() {
                    wizard.reset();
                });
	

                $("#test-config-wizard").click(function() {
                    wizard.show();
                });
	
                $("#new-config-wizard").click(function() {
                    wizard.show();
                });
            }
          
            ko.applyBindings(new WizardModel());
          });

          function BasicData(basic){
            var self = this;
            self.basicTemplate = 'basicTemplate';
            var container = new Container(basic.container);
            var system_model = new SystemModel(basic.system_model);
            var logger = new Logger(basic.logger);

            self.data = ko.observable({'container': container.data,'system_model':system_model.data, 'logger':logger.data});
                this.addReposeCluster = function(){
                    self.data().system_model().repose_clusters.push(new ReposeCluster());
                };
            
                this.addServiceCluster = function(){
                    self.data().system_model().service_clusters.push(new ServiceCluster());
                };
          }

          function Container(data){
            this.data = ko.observable(data);

          }

          function SystemModel(data){
              var repose_clusters = ko.observableArray(data.repose_clusters);
              var service_clusters = ko.observableArray(data.service_clusters);
              this.data = ko.observable({'repose_clusters':repose_clusters, 'service_clusters': service_clusters});
          }

          function Logger(data){
            this.data = ko.observable(data);
          }

          function ReposeCluster(){
              var self = this;
              self.id = ko.observable();
              self.rewrite_host_header = ko.observable(false);
              self.nodes = ko.observableArray([]);
              self.filters = ko.observableArray([]);
              self.services = ko.observableArray([]);
              self.destinations = ko.observableArray([]);
              
              self.addReposeClusterNode = function(){
                  self.nodes.push(new ClusterNode());
              };
              this.addReposeClusterService = function(){
                  self.services.push(new ClusterService());
              };
              this.addReposeClusterFilter = function(){
                  self.filters.push(new ClusterFilter());
              };
              this.addReposeClusterDestination = function(){
                  self.destinations.push(new ClusterDestination());
              };
          }
            
            function ClusterNode(){
                this.id = ko.observable();
                this.hostname = ko.observable();
                this.http_port = ko.observable();
                this.https_port = ko.observable();
            }
            
            function ClusterFilter(){
                this.id = ko.observable();
                this.name = ko.observable();
                this.configuration = ko.observable();
                this.uri = ko.observable();
            }
            
            function ClusterDestination(){
                var self = this;
                self.endpoints = ko.observableArray();
                self.clusters = ko.observableArray();
                this.addReposeClusterDestinationEndpoint = function(){
                    self.endpoints.push(new ClusterDestinationEndpoint());
                };
                
                this.addReposeClusterDestinationCluster = function(){
                    self.clusters.push(new ClusterDestinationCluster());
                };
            }
            
            function ClusterDestinationEndpoint(){
                this.id = ko.observable();
                this.protocol = ko.observable();
                this.route_path = ko.observable();
                this.is_default = ko.observable();
                this.hostname = ko.observable();
                this.port = ko.observable();
            }
            
            function ClusterDestinationCluster(){
                this.id = ko.observable();
                this.protocol = ko.observable();
                this.route_path = ko.observable();
                this.is_default = ko.observable();
                this.hostname = ko.observable();
            }

            function ClusterService(){
                this.name = ko.observable();
            }

          function ServiceCluster(data){
              var self = this;
              self.id = ko.observable();
              self.nodes = ko.observableArray([]);
              self.addServiceClusterNode = function(){
                  self.nodes.push(new ClusterNode());
              };
          }

          function Response(response){
            this.responseData = ko.observable(response);
          }
          
          function Benchmark(benchmark){
            this.benchmarkData = ko.observable(benchmark);
          }
            
          function Filter(item){
            this.id = ko.observable(item.id);
            this.english = ko.observable(item.english);
            this.filter_list = ko.observable(item.filter_list);
            this.description = ko.observable(item.description);
            this.isSelected = ko.observable(false);
          }
          
          function Detail(item){
            this.id = ko.observable(item.id);
            this.filter = ko.observable(item.filter);
            this.configTemplate = item.template;
            this.configData = null;
            switch(item.filter){
                case 'client-auth-n': 
                    this.configData = new ClientAuthFilter(item);
                    break;
                case 'rate-limiting':
                    this.configData = new RateLimitingFilter(item);
                    break;
            }
          }
          
          function ClientAuthFilter(item){
            var self = this;
            self.id = ko.observable(item.id);
            
            var authModules = ko.utils.arrayFirst(item.configs, function(config) { return config.key === 'auth-filter-module' });
            self.auth_filter_module = ko.observable();
            self.auth_filter_modules = ko.observableArray(authModules.value);
            self.authFilterModuleTemplate = '';
            self.authModuleData = ko.observable();
            
            
            self.client_mappings = ko.observableArray([]);

            self.addClientMapping = function(el){
                self.client_mappings.push(new ClientMapping('',''));
                $('#detail-accordion').accordion('refresh');
            };
            self.removeClientMapping = function(client_mapping){
                self.client_mappings.destroy(client_mapping);
            };
            
            //on auth_filter_module selection, load another template for that 
            self.auth_filter_module.subscribe(function(item){
                $.getJSON(item.action,function(detail){
                    self.authFilterModuleTemplate = detail.template;
                    self.authModuleData(detail.detail);
                    $('#detail-accordion').accordion('refresh');
                });
            });

            self.white_list_uris = ko.observableArray([]);
            self.removeWhiteListUri = function(uri){
                self.white_list_uris.destroy(uri);
            };
            self.addWhiteListUri = function(){
                self.white_list_uris.push(new WhiteListUri('*'));
                $('#detail-accordion').accordion('refresh');
            };
          }
          
          function RateLimitingFilter(item){
            this.id = ko.observable('rate limit');
          }
          
          function WhiteListUri(value){
            this.uri = ko.observable(value);
          }
          
          function ClientMapping(tenant_id, regex){
            this.tenant_id = ko.observable(tenant_id);
            this.regex = ko.observable(regex);
          }
          
          function Header(value){
            this.data = ko.observable(value);
          }

          
function setVersion(card) {
	var version = $("#version").val();
	card.wizard.setSubtitle(version);
}



</script>
		
		
	
	</body>
</html>

