<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" href="http://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css">
    <link href="bootstrap/css/bootstrap.min.css" rel="stylesheet" />
    <link href="bootstrap/css/wizard.css" rel="stylesheet" />
    <link href="http://cdnjs.cloudflare.com/ajax/libs/chosen/0.9.15/chosen.css" rel="stylesheet" />
    <style type="text/css">
      .wizard-modal p {
        margin: 0 0 10px;
        padding: 0;
      }
    </style>
  </head>
  <body style="padding:30px;">
    <button id="new-config-wizard" class="btn btn-primary">Create new Repose configuration</button>
    <button id="test-config-wizard" class="btn btn-primary">Test existing configuration in Repose</button>
    <div class="wizard" id="repose-wizard">
      <h1>Repose Wizard</h1>
          <div class="wizard-card" data-onValidated="setVersion" data-cardname="version">
            <h3>Select version</h3>
            <div class="wizard-input-section">
              <div class="control-group">
                <select name="version" id="version" data-bind="options: versions, value: selected_version"></select>
              </div>
            </div>
          </div>
          <div class="wizard-card" data-cardname="basic">
            <h3>Basic setup</h3>
            <div class="wizard-input-section">
              <div class="control-group">
                Enter random information that corresponds to system-model, container, and log4j settings
              </div>
            </div>
          </div>
          <div class="wizard-card" data-cardname="filters">
            <h3>Filters</h3>
            <div class="alert">
                What do you want Repose to do?  You can either build your configs from scratch or use our cookbooks.
            </div>
            <div class="wizard-input-section">
              <div id="filter-accordion">
                <!-- ko foreach: filters -->
                <h3>
                  <a href="#">
                    <input type="checkbox" data-bind="checked: isSelected" />
                    <span data-bind="text: english"/>
                  </a>
                </h3>
                <div>
                  <p data-bind="text: filter_list"/>
                  <p data-bind="text: description"/>
                </div>
                <!-- /ko -->
              </div>
			</div>
		  </div>
          <div class="wizard-card" data-cardname="details">
            <h3>Detailed Info!</h3>
			<div class="alert">
				You need to provide a few more information to make Repose rock!
			</div>
			<div class="wizard-input-section">
                <div id="detail-accordion">
                  <!-- ko foreach: details -->
                  <h3 data-bind="text: filter"></h3>
                  <div>
                    <div data-bind="template: { name: configTemplate, data: configData} ">
                    </div>
                  </div>
                  <!-- /ko -->
                </div>
			</div>
          </div>
          <div class="wizard-card" data-cardname="dd">
            <h3>Number of nodes</h3>
			<div class="alert">
				How many Repose instances are you putting in front of your application? (1 per app instance)
			</div>
            <div class="wizard-input-section">
              <div class="control-group">
                <label for="number-of-nodes">Number of nodes:</label>
                <input data-bind="value: number_of_nodes"/>
                <!-- ko foreach: dd_nodes -->
                    <label for="dd_ip">Enter ip for your node</label>
                    <input data-bind="value: $data"/>
                <!-- /ko -->
              </div>
            </div>
          </div>
          <div class="wizard-card" data-cardname="test">
            <h3>Test Drive!</h3>
			<div class="alert">
				Your configuration has been deployed to the following url: <url here>.  You can now test drive it and get benchmarks for your requests.
			</div>
            <div class="wizard-input-section">
              <div class="control-group">
                <fieldset>
                    <legend>Request setup</legend>
                    <div>
                        <label for="method">Select your method</label>
                        <select name="method" data-bind="options: methods, value: selected_method"></select>
                    </div>
                    <div>
                        <label for="headers">Headers:</label>
                        <button type="button" data-bind="click: addHeader">Add header</button>
                        <ul data-bind="foreach: headers, visible: headers().length > 0">
                            <li>
                                <input data-bind="value: data" />
                                <a href="#" data-bind="click: $parent.removeHeader">Delete</a>
                            </li>
                        </ul>
                    </div>
                    <div>
                        <label for="request_uri">Request URI</label>
                        <input data-bind="value: request_uri"/>
                    </div>
                    <div data-bind="visible: isMethodForData">
                        <label for="request_data">Request Data</label>
                        <textarea data-bind="value: request_data"></textarea>
                    </div>
                    <div>
                        <h3>Benchmark data (optional for benchmarking)</h3>
                        <label for="number_of_requests">Number of requests:</label>
                        <input data-bind="value: number_of_requests"/><br/>
                        <label for="number_of_concurrent">Number of concurrent requests:</label>
                        <input data-bind="value: number_of_concurrent"/>
                        <label for="time_limit">Time Limit:</label>
                        <input data-bind="value: time_limit"/>
                        <label for="window_size">TCP window size:</label>
                        <input data-bind="value: window_size"/>
                    </div>
                    <button type="button" data-bind="click: sendRequest">Send One Request</button>
                    <button type="button" data-bind="click: benchmark">Benchmark</button>
                </fieldset>
                <div data-bind="template: { name: 'responseTemplate', data: responseData} "></div>
                Simple client with options for methods, headers, and request.  Output will be request info, response info, and any other requests being made internally by Repose as well as response time.  One other options is to run a "benchmark test," which spins up apache benchmark and allows user to specify # of requests (max: 1000), concurrency (max: 100), time limit and window size.  Runs first against service directly and then via Repose.
              </div>
            </div>
          </div>
          <div class="wizard-card" data-cardname="download">
            <h3>Download!</h3>
			<div class="alert">
				Congratulations!  You're done.
			</div>
            <div class="wizard-input-section">
              <div class="control-group">
                  Download your configuration <a href="#">here</a>.  If you'd like more information on setting up Repose in your system, please refer to <a href="#">here</a>.
              </div>
            </div>
          </div>
		
		
			<div class="wizard-error">
				<div class="alert alert-error">
					<strong>There was a problem</strong> with your submission.
					Please correct the errors and re-submit.
				</div>
			</div>
		
			<div class="wizard-failure">
				<div class="alert alert-error">
					<strong>There was a problem</strong> submitting the form.
					Please try again in a minute.
				</div>
			</div>
		
			<div class="wizard-success">
				<div class="alert alert-success">
					Successful submission
				</div>
		
				<a class="btn create-another-config">Create another config</a>
				<span style="padding:0 10px">or</span>
				<a class="btn im-done">Done</a>
			</div>
		
		</div>
        
        <script type="text/html" id="responseTemplate">
            <table>
                <thead>
                    <tr>
                        <th>Request</th>
                        <th>Repose</th>
                        <th>Response</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                    
                    </tr>
                </tbody>
            </table>
        </script>
							
		<script type="text/html" id="clientAuthTemplate">
            <div>
                <label for="auth-filter-module">Select Auth filter Module</label>
                <select name="auth-filter-module" id="auth-filter-module" data-bind="options: auth_filter_modules, value: auth_filter_module, optionsText: 'value', optionsCaption: 'Choose...'"></select>
                <div data-bind="template: { name: authFilterModuleTemplate, data: authModuleData} ">
                </div>
            </div>
            <div>
                <label for="auth-filter-module">White lists</label>
                <button type="button" data-bind="click: addWhiteListUri" id="add-white-list">Add white list regex</button>
                <ul data-bind="foreach: white_list_uris, visible: white_list_uris().length > 0">
                    <li>
                        <input data-bind="value: uri" />
                        <a href="#" data-bind="click: $parent.removeWhiteListUri">Delete</a>
                    </li>
                </ul>
            </div>
        </script>
		<script type="text/html" id="rateLimitingTemplate">
            <span data-bind="text: id"/>
        </script>
        <script type="text/html" id="basicAuthTemplate">
            <div>
                <label for="username">Username:<span class="caret"></span></label>
                <input data-bind="value: username"/>
            </div>
            <div>
                <label for="password">Password:<span class="caret"></span></label>
                <input type="password" data-bind="value: password"/>
            </div>
        </script>
        <script type="text/html" id="openstackAuthTemplate">
            <fieldset>
                <legend>Main information</legend>
                <div>
                    <label for="delegable">Delegable</label>
                    <input type="checkbox" data-bind="checked: delegable"/>
                </div>
                <div>
                    <label for="user_cache_timeout">user cache timeout</label>
                    <input data-bind="value: user_cache_timeout"/>
                </div>
                <div>
                    <label for="token_cache_timeout">token cache timeout</label>
                    <input data-bind="value: token_cache_timeout"/>
                </div>
                <div>
                    <label for="tenanted">Tenanted</label>
                    <input type="checkbox" data-bind="checked: tenanted"/>
                </div>
                <div>
                    <label for="request_groups">Request Groups</label>
                    <input type="checkbox" data-bind="checked: request_groups"/>
                </div>
            </fieldset>
            <fieldset>
                <legend>OpenStack Identity Service endpoint<span class="caret"></span></legend>
                <div>
                    <label for="username">Username:<span class="caret"></span></label>
                    <input data-bind="value: service.username"/>
                </div>
                <div>
                    <label for="password">Password:<span class="caret"></span></label>
                    <input type="password" data-bind="value: service.password"/>
                </div>
                <div>
                    <label for="uri">Uri:<span class="caret"></span></label>
                    <input data-bind="value: service.uri"/>
                </div>
                <div>
                    <label for="tenantId">Tenant Id:</label>
                    <input data-bind="value: service.tenant_id"/>
                </div>
            </fieldset>
            <fieldset>
                <legend>Include endpoints in headers</legend>
                <div>
                    <input type="checkbox" data-bind="checked: header.isSelected" />
                    <span>Check to include endpoints in headers</span>
                </div>
                <div>
                    <label for="format">Endpoint header format:</label>
                    <select name="format" data-bind="options: header.format_enumerations, value: header.format"></select>
                </div>
                <div>
                    <label for="cache-timeout">Cache timeout in ms:</label>
                    <input data-bind="value: header.cache_timeout"/>
                </div>
            </fieldset>
            <button type="button" data-bind="click: $parent.addClientMapping" data='client_mappings'>Add target URI for auth requests</button>
            <ul data-bind="foreach: $parent.client_mappings">
                <li>
                    <input data-bind="value: tenant_id" placeholder="The tenantId with admin permission used by the Keystone implementation perform admin tasks." />
                    <input data-bind="value: regex" placeholder="Regex used to extract the client id from a given URI." />
                    <a href="#" data-bind="click: $parents[1].removeClientMapping">Delete</a>
                </li>
            </ul>
        </script>
        <script src="http://code.jquery.com/jquery-1.9.1.js"></script>
        <script src="http://code.jquery.com/ui/1.10.3/jquery-ui.js"></script>
  		<script src="http://cdnjs.cloudflare.com/ajax/libs/chosen/0.9.15/chosen.jquery.min.js"></script>
		<script src="bootstrap/js/bootstrap.min.js"></script>
        <script src="http://cdnjs.cloudflare.com/ajax/libs/knockout/2.2.1/knockout-min.js"></script>
		<script src="bootstrap/js/wizard.min.js"></script>
        <script type="text/javascript">
          $(function() {
            function WizardModel(){
                var self = this;
                self.versions = ko.observableArray([]);
                self.filters = ko.observableArray([]);
                self.details = ko.observableArray([]);
                self.selected_version = ko.observable();
                self.number_of_nodes = ko.observable();
                self.test_environment = ko.observable();
                self.responseData = ko.observable();
                
                self.dd_nodes = ko.observableArray([]);
                
                self.number_of_nodes.subscribe(function(item){
                    self.dd_nodes.removeAll();
                    for(var i = 0, max = item; i < item; i ++){
                        self.dd_nodes.push("127.0.0.1");
                    }
                });
                
                self.methods = ko.observableArray(['GET','PUT','POST','DELETE','HEAD']);
                self.selected_method = ko.observable();
                self.headers = ko.observableArray([]);
                self.request_uri = ko.observable();
                self.request_data = ko.observable();
                self.isMethodForData = ko.observable(false);
                self.number_of_requests = ko.observable(1000);
                self.number_of_concurrent = ko.observable(100);
                self.time_limit = ko.observable(60);
                self.window_size = ko.observable(256);
                
                self.selected_method.subscribe(function(item){
                    if(item === 'PUT' || item === 'POST'){
                        self.isMethodForData(true);
                    }else{
                        self.isMethodForData(false);
                    }
                });
                
                self.addHeader = function (){
                    self.headers.push(new Header(''));
                };
                
                self.removeHeader = function(header){
                    self.headers.destroy(header);
                };
                
                self.sendRequest = function(){
                    if(self.selected_method() !== '' && self.request_uri() !== ''){
                        //if post or put, add data
                        var headersToSubmit = $.map(self.headers(), function(item){
                                return item.data()
                            }
                        );
                        var request_setup = {
                            'method': self.selected_method(),
                            'headers': ko.toJSON(self.headers()),
                            'uri': self.request_uri(),
                            'data': self.request_data()
                        };
                        $.ajax({
                            url: "/execute_request/" + self.test_environment(),
                            type: 'POST',
                            contentType: 'json',
                            data: ko.toJSON(request_setup),
                            success: function(data) {
                                //load data into responseData
                                console.log(data);
                            }
                        });
                        
                    }
                    //send request here
                };
                
                self.benchmark = function(){
                    //send benchmark here
                };
                
                //$.fn.wizard.logging = true;
                var wizard = $("#repose-wizard").wizard({width:1000, increaseHeight: 100});
                $(".chzn-select").chosen();
                wizard.el.find(".wizard-ns-select").change(function() {
                    wizard.el.find(".wizard-ns-detail").show();
                });

                wizard.el.find(".create-server-service-list").change(function() {
                    var noOption = $(this).find("option:selected").length == 0;
                    wizard.getCard(this).toggleAlert(null, noOption);
                });
                
                wizard.cards["version"].on("loaded", function(card){
                    //load the version here
                    $.getJSON("/get_versions",function(versions){
                      self.versions(versions);
                    });
                });

                wizard.cards["filters"].on("reload", function(card){
                    //load the version here
                    $.getJSON("/get_filters/" + self.selected_version(),function(filters){
                      var mappedFilters = $.map(filters,function(item){ return new Filter(item)});
                      self.filters(mappedFilters);
                      $("#filter-accordion").accordion({collapsible:true});
                      $('#filter-accordion input[type="checkbox"]').click(function(e) {
                        e.stopPropagation();
                      });
                    });
                });
                
                wizard.cards["details"].on("selected", function(card){
                    //load the version here
                    var filterstoSubmit = $.map(
                        ko.utils.arrayFilter(self.filters(), function(filter) { return filter.isSelected() }), function(item){
                            return item.id()
                        }
                    );
                    $.getJSON("/get_data_for_filter/" + filterstoSubmit.join(","),function(details){
                      var mappedDetails = $.map(details,function(item){ return new Detail(item)});
                      self.details(mappedDetails);
                      $("#detail-accordion").accordion({collapsible:true});
                      $('#detail-accordion').accordion('refresh');
                    });
                });
                
                wizard.cards["test"].on("selected", function(card){
                    $.getJSON("/get_test_environment",function(uri){
                      self.test_environment(uri.id);
                    });
                });


                wizard.on("submit", function(wizard) {
                    var submit = {};
                    console.log(wizard.serialize());

                    setTimeout(function() {
                        wizard.trigger("success");
                        wizard.hideButtons();
                        wizard._submitting = false;
                        wizard.showSubmitCard("success");
                        wizard._updateProgressBar(0);
                    }, 2000);
                });
	

                wizard.el.find(".wizard-success .im-done").click(function() {
                    wizard.reset().close();
                });

                wizard.el.find(".wizard-success .create-another-config").click(function() {
                    wizard.reset();
                });
	

                $("#test-config-wizard").click(function() {
                    wizard.show();
                });
	
                $("#new-config-wizard").click(function() {
                    wizard.show();
                });
            }
          
            ko.applyBindings(new WizardModel());
          });
          
          function Filter(item){
            this.id = ko.observable(item.id);
            this.english = ko.observable(item.english);
            this.filter_list = ko.observable(item.filter_list);
            this.description = ko.observable(item.description);
            this.isSelected = ko.observable(false);
          }
          
          function Detail(item){
            this.id = ko.observable(item.id);
            this.filter = ko.observable(item.filter);
            this.configTemplate = item.template;
            this.configData = null;
            switch(item.filter){
                case 'client-auth-n': 
                    this.configData = new ClientAuthFilter(item);
                    break;
                case 'rate-limiting':
                    this.configData = new RateLimitingFilter(item);
                    break;
            }
          }
          
          function ClientAuthFilter(item){
            var self = this;
            self.id = ko.observable(item.id);
            
            var authModules = ko.utils.arrayFirst(item.configs, function(config) { return config.key === 'auth-filter-module' });
            self.auth_filter_module = ko.observable();
            self.auth_filter_modules = ko.observableArray(authModules.value);
            self.authFilterModuleTemplate = '';
            self.authModuleData = ko.observable();
            
            
            self.client_mappings = ko.observableArray([]);

            self.addClientMapping = function(el){
                self.client_mappings.push(new ClientMapping('',''));
                $('#detail-accordion').accordion('refresh');
            };
            self.removeClientMapping = function(client_mapping){
                self.client_mappings.destroy(client_mapping);
            };
            
            //on auth_filter_module selection, load another template for that 
            self.auth_filter_module.subscribe(function(item){
                $.getJSON(item.action,function(detail){
                    self.authFilterModuleTemplate = detail.template;
                    self.authModuleData(detail.detail);
                    $('#detail-accordion').accordion('refresh');
                });
            });

            self.white_list_uris = ko.observableArray([]);
            self.removeWhiteListUri = function(uri){
                self.white_list_uris.destroy(uri);
            };
            self.addWhiteListUri = function(){
                self.white_list_uris.push(new WhiteListUri('*'));
                $('#detail-accordion').accordion('refresh');
            };
          }
          
          function RateLimitingFilter(item){
            this.id = ko.observable('rate limit');
          }
          
          function WhiteListUri(value){
            this.uri = ko.observable(value);
          }
          
          function ClientMapping(tenant_id, regex){
            this.tenant_id = ko.observable(tenant_id);
            this.regex = ko.observable(regex);
          }
          
          function Header(value){
            this.data = ko.observable(value);
          }

          
function setVersion(card) {
	var version = $("#version").val();
	card.wizard.setSubtitle(version);
}



</script>
		
		
	
	</body>
</html>

